// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	pmodel "github.com/willie68/go-micro/pkg/pmodel"
)

// AddressStorage is an autogenerated mock type for the AddressStorage type
type AddressStorage struct {
	mock.Mock
}

type AddressStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *AddressStorage) EXPECT() *AddressStorage_Expecter {
	return &AddressStorage_Expecter{mock: &_m.Mock}
}

// Addresses provides a mock function with given fields:
func (_m *AddressStorage) Addresses() ([]pmodel.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Addresses")
	}

	var r0 []pmodel.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pmodel.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pmodel.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pmodel.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressStorage_Addresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addresses'
type AddressStorage_Addresses_Call struct {
	*mock.Call
}

// Addresses is a helper method to define mock.On call
func (_e *AddressStorage_Expecter) Addresses() *AddressStorage_Addresses_Call {
	return &AddressStorage_Addresses_Call{Call: _e.mock.On("Addresses")}
}

func (_c *AddressStorage_Addresses_Call) Run(run func()) *AddressStorage_Addresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AddressStorage_Addresses_Call) Return(_a0 []pmodel.Address, _a1 error) *AddressStorage_Addresses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressStorage_Addresses_Call) RunAndReturn(run func() ([]pmodel.Address, error)) *AddressStorage_Addresses_Call {
	_c.Call.Return(run)
	return _c
}

// Check provides a mock function with given fields:
func (_m *AddressStorage) Check() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressStorage_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type AddressStorage_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
func (_e *AddressStorage_Expecter) Check() *AddressStorage_Check_Call {
	return &AddressStorage_Check_Call{Call: _e.mock.On("Check")}
}

func (_c *AddressStorage_Check_Call) Run(run func()) *AddressStorage_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AddressStorage_Check_Call) Return(_a0 bool, _a1 error) *AddressStorage_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressStorage_Check_Call) RunAndReturn(run func() (bool, error)) *AddressStorage_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckName provides a mock function with given fields:
func (_m *AddressStorage) CheckName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AddressStorage_CheckName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckName'
type AddressStorage_CheckName_Call struct {
	*mock.Call
}

// CheckName is a helper method to define mock.On call
func (_e *AddressStorage_Expecter) CheckName() *AddressStorage_CheckName_Call {
	return &AddressStorage_CheckName_Call{Call: _e.mock.On("CheckName")}
}

func (_c *AddressStorage_CheckName_Call) Run(run func()) *AddressStorage_CheckName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AddressStorage_CheckName_Call) Return(_a0 string) *AddressStorage_CheckName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressStorage_CheckName_Call) RunAndReturn(run func() string) *AddressStorage_CheckName_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: adr
func (_m *AddressStorage) Create(adr pmodel.Address) (string, error) {
	ret := _m.Called(adr)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(pmodel.Address) (string, error)); ok {
		return rf(adr)
	}
	if rf, ok := ret.Get(0).(func(pmodel.Address) string); ok {
		r0 = rf(adr)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(pmodel.Address) error); ok {
		r1 = rf(adr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AddressStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - adr pmodel.Address
func (_e *AddressStorage_Expecter) Create(adr interface{}) *AddressStorage_Create_Call {
	return &AddressStorage_Create_Call{Call: _e.mock.On("Create", adr)}
}

func (_c *AddressStorage_Create_Call) Run(run func(adr pmodel.Address)) *AddressStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pmodel.Address))
	})
	return _c
}

func (_c *AddressStorage_Create_Call) Return(_a0 string, _a1 error) *AddressStorage_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressStorage_Create_Call) RunAndReturn(run func(pmodel.Address) (string, error)) *AddressStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *AddressStorage) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddressStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AddressStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *AddressStorage_Expecter) Delete(id interface{}) *AddressStorage_Delete_Call {
	return &AddressStorage_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *AddressStorage_Delete_Call) Run(run func(id string)) *AddressStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AddressStorage_Delete_Call) Return(_a0 error) *AddressStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressStorage_Delete_Call) RunAndReturn(run func(string) error) *AddressStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: id
func (_m *AddressStorage) Has(id string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AddressStorage_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type AddressStorage_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - id string
func (_e *AddressStorage_Expecter) Has(id interface{}) *AddressStorage_Has_Call {
	return &AddressStorage_Has_Call{Call: _e.mock.On("Has", id)}
}

func (_c *AddressStorage_Has_Call) Run(run func(id string)) *AddressStorage_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AddressStorage_Has_Call) Return(_a0 bool) *AddressStorage_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressStorage_Has_Call) RunAndReturn(run func(string) bool) *AddressStorage_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *AddressStorage) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddressStorage_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type AddressStorage_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *AddressStorage_Expecter) Init() *AddressStorage_Init_Call {
	return &AddressStorage_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *AddressStorage_Init_Call) Run(run func()) *AddressStorage_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AddressStorage_Init_Call) Return(_a0 error) *AddressStorage_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressStorage_Init_Call) RunAndReturn(run func() error) *AddressStorage_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *AddressStorage) Read(id string) (*pmodel.Address, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *pmodel.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pmodel.Address, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *pmodel.Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pmodel.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressStorage_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type AddressStorage_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *AddressStorage_Expecter) Read(id interface{}) *AddressStorage_Read_Call {
	return &AddressStorage_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *AddressStorage_Read_Call) Run(run func(id string)) *AddressStorage_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AddressStorage_Read_Call) Return(_a0 *pmodel.Address, _a1 error) *AddressStorage_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressStorage_Read_Call) RunAndReturn(run func(string) (*pmodel.Address, error)) *AddressStorage_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *AddressStorage) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddressStorage_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type AddressStorage_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *AddressStorage_Expecter) Shutdown() *AddressStorage_Shutdown_Call {
	return &AddressStorage_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *AddressStorage_Shutdown_Call) Run(run func()) *AddressStorage_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AddressStorage_Shutdown_Call) Return(_a0 error) *AddressStorage_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressStorage_Shutdown_Call) RunAndReturn(run func() error) *AddressStorage_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: adr
func (_m *AddressStorage) Update(adr pmodel.Address) error {
	ret := _m.Called(adr)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(pmodel.Address) error); ok {
		r0 = rf(adr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddressStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AddressStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - adr pmodel.Address
func (_e *AddressStorage_Expecter) Update(adr interface{}) *AddressStorage_Update_Call {
	return &AddressStorage_Update_Call{Call: _e.mock.On("Update", adr)}
}

func (_c *AddressStorage_Update_Call) Run(run func(adr pmodel.Address)) *AddressStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pmodel.Address))
	})
	return _c
}

func (_c *AddressStorage_Update_Call) Return(_a0 error) *AddressStorage_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressStorage_Update_Call) RunAndReturn(run func(pmodel.Address) error) *AddressStorage_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAddressStorage creates a new instance of AddressStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressStorage {
	mock := &AddressStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
